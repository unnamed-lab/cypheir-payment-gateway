generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  dateOfBirth   DateTime?
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  transactions  Transaction[]
  invoices      Invoice[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Wallet {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  address       String    @unique
  type          String
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Transaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  currency      String
  status        String
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  invoice       Invoice?  @relation(fields: [invoiceId], references: [id])
  invoiceId     String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Invoice {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  amount          Float
  currency        String
  status          String
  recipientEmail  String
  dueDate         DateTime?
  merchantPublicKey String
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
  transactions    Transaction[]
  milestones      Milestone[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


model Milestone {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  amount      Float
  dueDate     DateTime?
  status      String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


